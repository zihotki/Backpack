Backpack, universal way of implicitly storing contextual information useful for logging/tracing/error reporting through the call chain

* Provide a way to copy all data to external container to pass to child tasks run in parralel 

- should the data be cloned or just the container reference be passed?
	? we can allow only immutable data - string, byte, json string, int, bool, guid. This way it'll be easier to send the data over the wire and data won't need
		to be serialized each time, it's more optimal especially for complex objects. But it raises the question how to store the data. Backpack item per each?
	? allow objects and serialize them each time

- how task.run handles the errors? should the run function have it's own scope with error handling?
- how async await works with configure await and when it runs a separate task or on different thread? is call context passed across the chain?
- how to flexibly store data so that serilog can still use its own properties (InfoOrErrorProp...) 
	

add Get for current scope (scope-limited Get)

----------

Serilog.UseBackpack()
Zipkin.UseBackpack()

----------

Zipkin:
    * Spans will not expose information about Annotations and will create necessary Annotations (cs, cr, ss, sr) implicitly by using timestamps of Constructor and Close method calls.
	* To add a binary annotation you need to put a variable in Backpack with either Shared or Zipkin flag
	* ?? All predefined zipkin annotations will be stored in backpack with 'z_' prefix and will be mapped to corresponding annotation when sending data
	* ?? how to store information about error when unwinding the scopes
	
----------

todo:
	Implement functionality to load trace/span from http calls
	Implement functionality to spread trace/span into http calls
	Implement direct ES codec
	Add functionality to server span to initialize isSampled, Trace, etc. if trace hasn't been started yet
	Local vs hidden items, which one to use, shall it be unified?

	
	implement support for binary annotations

	!! Decide what to do when exception occures - do we need enforce tracing (Is Sampled or Is Debug to true) for the current trace or not?
	!! If so, how do we put it to backpack to apply for all parent scopes of a trace?
	





